Remove Nth Node From End of List:

Problem Description:
Given the head of a linked list, remove the nth node from the end of the list and return its head.

Problem Link:
https://leetcode.com/problems/remove-nth-node-from-end-of-list/

Example:
Input: head = [1,2,3,4,5], n = 2
Output: [1,2,3,5]

Explanation:
Given linked list: 1 -> 2 -> 3 -> 4 -> 5, and n = 2.
After removing the second node from the end, the linked list becomes 1 -> 2 -> 3 -> 5.

Time Complexity:
The time complexity of this solution is O(L), where L is the length of the linked list. We need to traverse the list twice: once to calculate the length and once to reach the node just before the position to be removed.

Space Complexity:
The space complexity of this solution is O(1) because it only uses a constant amount of additional space.

Note:
- The value of n is always valid (1 ≤ n ≤ length of the list).
- The input list does not contain cycles.
- The head node will never be removed.
- Be cautious when dealing with edge cases, such as removing the first node or removing the last node from the list.

